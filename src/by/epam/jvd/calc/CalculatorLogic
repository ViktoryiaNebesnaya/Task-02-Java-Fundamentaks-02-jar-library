package by.epam.jwd.calc;

import java.util.Stack;

public class —alculatorLogic {

	public double calcExpression(String expression) {
		
		String reversePolishNotation = expressionToRpn(expression);
		
		double сalculatorResult = сountMethod(reversePolishNotation);

		return сalculatorResult;
	}

	private static int priorityOfSymbol(char symbol) {

		switch (symbol) {

		case ('*'):
			return 3;
		case ('/'):
			return 3;
		case ('-'):
			return 2;
		case ('+'):
			return 2;
		case ('('):
			return 1;
		case (')'):
			return -1;

		}
		return 0;

	}

	public String expressionToRpn(String expression) {
		String current = "";
		Stack<Character> stack = new Stack<>();
		int priority;

		for (int i = 0; i < expression.length(); i++) {
			priority = priorityOfSymbol(expression.charAt(i));

			if (priority == 0) {
				current += expression.charAt(i);
			}
			if (priority == 1) {
				stack.push(expression.charAt(i));
			}

			if (priority > 1) {
				current += (' ');

				while (!stack.empty()) {
					if (priorityOfSymbol(stack.peek()) >= priority) {
						current += (stack.pop());
					} else {
						break;
					}
				}
				stack.push(expression.charAt(i));
			}

			if (priority == -1) {
				current += (' ');
				while (priorityOfSymbol(stack.peek()) != 1) {
					current += (stack.pop());
				}
				stack.pop();
			}
		}
		while (!stack.empty()) {
			current += (stack.pop());
		}
		return current;
	}

	public Double сountMethod(String rpn) {

		String oper = new String();
		Stack<Double> stack = new Stack<>();

		for (int i = 0; i < rpn.length(); i++) {
			if (rpn.charAt(i) == ' ') {
				continue;
			}

			if (priorityOfSymbol(rpn.charAt(i)) == 0) {
				while (rpn.charAt(i) != ' ' && priorityOfSymbol(rpn.charAt(i)) == 0) {
					oper += rpn.charAt(i++);
					if (i == rpn.length())
						break;
				}

				stack.push(Double.parseDouble(oper));
				oper = new String();

			}

			if (priorityOfSymbol(rpn.charAt(i)) > 1) {
				double a = stack.pop(), b = stack.pop();

				switch (rpn.charAt(i)) {
				case '+':
					stack.push(a + b);
					break;
				case '-':
					stack.push(b - a);
					break;
				case '*':
					stack.push(a * b);
					break;
				case '/':
					stack.push(b / a);
					break;

				}
			}
		}
		return stack.pop();
	}
}
